#!/bin/bash

inputFile="$inputFile"
inFileName="$inputFile.name"
inputPathParent="$inputPath.parent"
geoFileName=$inputPath.name.replace("L1B_LAC","GEO*")

#[[

#for debugging
#set -x

set -e
set -m

outFile=${inFileName}-l2gen.hdf

export OCSSWROOT=./seadas-7.0/seadas-7.0
L2GEN_BIN=${OCSSWROOT}/run/bin/linux_64/l2gen

source $OCSSWROOT/OCSSW_bash.env

# append newline to parameters.anc
touch parameters.anc
echo >> parameters.anc


]]#

#if ($inputRectangle)

#set( $Double = 0.0 )

#set( $Dspixl = $inputRectangle.x + 1 )
#set( $spixl = $Double.valueOf($Dspixl).intValue() )

#set( $Depixl = $inputRectangle.x + $inputRectangle.width )
#set( $epixl = $Double.valueOf($Depixl).intValue() )

#set( $Dsline = $inputRectangle.y + 1 )
#set( $sline = $Double.valueOf($Dsline).intValue() )

#set( $Deline = $inputRectangle.y + $inputRectangle.height )
#set( $eline = $Double.valueOf($Deline).intValue() )

echo "spixl=$spixl" >> parameters.anc
echo "epixl=$epixl" >> parameters.anc
echo "sline=$sline" >> parameters.anc
echo "eline=$eline" >> parameters.anc
#end

#[[

if [[ $inFileName =~ ^MER_ ]]
then
  # MER_RR__1PNACR20020523_103543_....
  productTime="${inFileName:23:2}:${inFileName:25:2}:${inFileName:27:2}"
  productDate="${inFileName:14:4}-${inFileName:18:2}-${inFileName:20:2}"
elif [[ $inFileName =~ ^[AS][0-9]+ ]]
then
  # A2003001000000.L1B_LAC or S2003001000000.L1B_LAC
  productTime="${inFileName:8:2}:${inFileName:10:2}:${inFileName:12:2}"
  pdate="${inFileName:1:7}"
  pyear=${pdate%???}
  pday=${pdate#$pyear}
  productDate=$(date -d "${pyear}-01-01 +${pday} days -1 day" "+%Y-%m-%d")
fi

# get AUX data files
s=`date -d "${productDate} ${productTime}Z" -u +%s`
d=`date -d @$s -u +%Y%j%H%M%S`
h=`date -d @$s -u +%H`

h1=$((((1$h-100)/6)*6))
d1="`date -d @$s -u +%Y%j``printf %02d ${h1}`"

s2=$(($s + 21599))
h21=`date -d @$s2 -u +%H`
h22=$((((1$h21-100)/6)*6))
d2="`date -d @$s2 -u +%Y%j``printf %02d ${h22}`"

s3=$(($s + 21600))
h31=`date -d @$s3 -u +%H`
h32=$((((1$h31-100)/6)*6))
d3="`date -d @$s3 -u +%Y%j``printf %02d ${h32}`"

s4=$(($s - 43200))
d4=`date -d @$s4 -u +%Y%j`

d5=`date -d @$s -u +%Y%j`

s6=$(($s + 43200))
d6=`date -d @$s6 -u +%Y%j`

ANC_ROOT=/calvalus/auxiliary/seadas/anc
function get_anc() {
  local label=$1
  local year_doy=$2

  echo "get_nac ${label} ${year_doy}"

  while [ "$3" != "" ]; do
    echo "testting $ANC_ROOT/${year_doy:0:4}/${year_doy:4:3}/${3}"
    path=`hadoop fs -ls $ANC_ROOT/${year_doy:0:4}/${year_doy:4:3}/${3}|awk '{ print $8 }'`
    if [ "$path" != "" ]; then
     break
    fi
    shift
  done
  if [ "$path" == "" ]; then
    echo "No auxdata found for type:${label} date:${year_doy} found"
    exit 1
  fi
  local workfile=`basename $path`
  if [ ! -e ${workfile} ]; then
    echo "copy to cwd as ${workfile}"
    hadoop fs -copyToLocal $path .
  fi
  echo "$label=${workfile}" >> parameters.anc
}

function get_ozone() {
  get_anc $1 $2 N${2}00_O3_TOMSOMI_24h.hdf S${2}00${2:4:3}23_TOVS.OZONE S${2}00${2:4:3}23_TOAST.OZONE
}


get_anc "icefile" $d5 "?${d5}00_SEAICE_*"

get_anc "met1" $d1 "S${d1}_NCEP.MET" "N${d1}_MET_NCEPN_6h.hdf"
get_anc "met2" $d2 "S${d2}_NCEP.MET" "N${d2}_MET_NCEPN_6h.hdf"
get_anc "met3" $d3 "S${d3}_NCEP.MET" "N${d3}_MET_NCEPN_6h.hdf"

get_ozone "ozone1" $d4
get_ozone "ozone2" $d5
get_ozone "ozone3" $d6

get_anc "sstfile" $d5 "?${d5}_SST_*"


echo "ifile=${inputFile}" >> parameters.anc
echo "ofile=${outFile}" >> parameters.anc

if [[ $inFileName =~ ^A[0-9]+ ]]; then
  # MODIS needs geofile

  echo "testting ${inputPathParent}/${geoFileName}"
  geoPath=`hadoop fs -ls ${inputPathParent}/${geoFileName}|awk '{ print $8 }'`
  if [ "$geoPath" != "" ]; then
    workfile=`basename $geoPath`
    if [ ! -e ${workfile} ]; then
      echo "copy to cwd as ${workfile}"
      hadoop fs -copyToLocal $geoPath .
      echo "geofile=${workfile}" >> parameters.anc
    fi
  fi
fi

# for debugging purpose
echo "=========parameters.anc========="
cat parameters.anc
echo "=========parameters.anc========="


function handle_progress() {
  line=$1
  echo $line
  if [[ ${line} =~ Processing\ scan\ #\ +[0-9]+\ +\(([0-9]+)\ +of\ +([0-9]+)\)\ +after ]]; then
    a1=${BASH_REMATCH[1]}
    a2=${BASH_REMATCH[2]}
    progress=$(echo "scale=3; ${a1} / ${a2}" | bc)
    printf "CALVALUS_PROGRESS %.3f\n" $progress
  fi
}

echo ${L2GEN_BIN} par=parameters.anc
${L2GEN_BIN} par=parameters.anc | while read x ; do handle_progress "$x" ; done
echo CALVALUS_OUTPUT_PRODUCT ${outFile}
]]#